# Makefile for pimpmobile module player
# Copyright (C) 2005-2007 Jørn Nystad and Erik Faye-Lund
# For conditions of distribution and use, see copyright notice in LICENSE.TXT

# configuration
TARGET    ?= arm-gba
HOST      ?= $(shell $(HOST_CC) -dumpmachine)
BUILD_DIR ?= build

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>devkitPro")
endif

DEVKITARM = $(DEVKITPRO)/devkitARM
LIBGBA    = $(DEVKITPRO)/libgba
LIBNDS    = $(DEVKITPRO)/libnds

ifeq ($(TARGET), arm-gba)
TARGET_PREFIX ?= arm-eabi-
else
TARGET_PREFIX = $(TARGET)
endif

define setup-gcc
	$(1)CC      = $(2)gcc
	$(1)CXX     = $(2)g++
	$(1)OBJCOPY = $(2)objcopy
	$(1)STRIP   = $(2)strip
	$(1)LD      = $(2)ld
	$(1)AS      = $(2)as
	$(1)AR      = $(2)ar
endef

$(eval $(call setup-gcc,TARGET_, $(TARGET_PREFIX)))
$(eval $(call setup-gcc,HOST_,))

MKDIR = mkdir -p

ifeq ($(TARGET), arm-gba)
	TARGET_CPPFLAGS = -I$(DEVKITARM)/include -I$(LIBGBA)/include -DTARGET_GBA
	TARGET_CFLAGS   = -mthumb-interwork -mlong-calls
	TARGET_CXXFLAGS = -mthumb-interwork -mlong-calls
	TARGET_LDFLAGS  = -mthumb-interwork -Wl,--gc-section
	TARGET_ASFLAGS  = -mthumb-interwork
endif

CPPFLAGS = 
CFLAGS   = 
CXXFLAGS = -fconserve-space -fno-rtti -fno-exceptions
LDFLAGS  = -Wl,-Map,$(basename $@).map
ASFLAGS  = 

ARM   = -marm
THUMB = -mthumb

VPATH = src/ converter/

OBJS = \
	pimp_gba.o          \
	pimp_render.o       \
	pimp_envelope.o     \
	pimp_mod_context.o  \
	pimp_math.iwram.o   \
	pimp_mixer.iwram.o

PIMPCONV_OBJS = \
	pimpconv.o \
	serializer.o \
	serialize_module.o \
	serialize_instrument.o \
	pimp_sample_bank.o \
	convert_sample.o \
	load_xm.o \
	load_mod.o

ifeq ($(DEBUG), 1)
	CPPFLAGS += -DDEBUG
	CXXFLAGS += -g3 -ggdb
	CFLAGS   += -g3 -ggdb
	OBJS     += pimp_mixer_portable.o
	OBJS     += pimp_debug.o 
else
	CPPFLAGS += -DRELEASE -DNDEBUG
	CXXFLAGS += -O3 -fomit-frame-pointer
	CFLAGS   += -O3 -fomit-frame-pointer
	OBJS     += pimp_mixer_arm.o
	OBJS     += pimp_mixer_clip_arm.o
endif

ifeq ($(PROFILING), 1)
	CFLAGS += -finstrument-functions
	CXXFLAGS += -finstrument-functions
	OBJS += profiling/cyg-profile.o
endif

TARGET_BUILD_DIR = $(BUILD_DIR)/$(TARGET)
HOST_BUILD_DIR = $(BUILD_DIR)/$(HOST)

make-target-objs = $(addprefix $(TARGET_BUILD_DIR)/, $(1))
make-host-objs = $(addprefix $(HOST_BUILD_DIR)/, $(1))

make-target-deps = $(addprefix $(TARGET_BUILD_DIR)/, $(1:.o=.d))
make-host-deps = $(addprefix $(HOST_BUILD_DIR)/, $(1:.o=.d))


REAL_OBJS =	$(call make-target-objs, $(OBJS))

.PHONY: all clean run debug

all: lib/libpimpmobile.a

clean:
	$(RM) lib/libpimpmobile.a $(call make-target-objs, $(OBJS)) $(call make-target-deps, $(OBJS))
	$(RM) bin/pimpconv $(call make-host-objs, $(PIMPCONV_OBJS)) $(call make-host-deps, $(PIMPCONV_OBJS))

test:
	@echo $(call make-host-objs, $(PIMPCONV_OBJS))
	@echo $(call make-target-objs, $(OBJS))

bin/pimpconv: $(call make-host-objs, $(PIMPCONV_OBJS))
	$(CXX) $^ $(LDFLAGS) -o $@

lib/libpimpmobile.a: $(REAL_OBJS)
	$(TARGET_AR) $(ARFLAGS) $@ $?

#### C ####

$(TARGET_BUILD_DIR)/%.iwram.o: %.c
	@$(MKDIR) $(dir $@)
	$(TARGET_CC) $(CPPFLAGS) $(TARGET_CPPFLAGS) $(CFLAGS) $(TARGET_CFLAGS) $(ARM) -c $< -o $@ -MMD -MP -MF $(@:.o=.d)

$(TARGET_BUILD_DIR)/%.o: %.c
	@$(MKDIR) $(dir $@)
	$(TARGET_CC) $(CPPFLAGS) $(TARGET_CPPFLAGS) $(CFLAGS) $(TARGET_CFLAGS) $(THUMB) -c $< -o $@ -MMD -MP -MF $(@:.o=.d)

$(HOST_BUILD_DIR)/%.o: %.c
	@$(MKDIR) $(dir $@)
	$(HOST_CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@ -MMD -MP -MF $(@:.o=.d)

### C++

$(TARGET_BUILD_DIR)/%.o: %.cpp
	@$(MKDIR) $(dir $@)
	$(TARGET_CXX) $(CPPFLAGS) $(CXXFLAGS) $(THUMB) -c $< -o $@ -MMD -MP -MF $(@:.o=.d)

$(HOST_BUILD_DIR)/%.o: %.cpp
	@$(MKDIR) $(dir $@)
	$(HOST_CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@ -MMD -MP -MF $(@:.o=.d)

### ASM

$(TARGET_BUILD_DIR)/%.o: %.S
	@$(MKDIR) $(dir $@)
	$(TARGET_CC) -MMD -MF $(DEPSDIR)/$(basename $(@F)).d -x assembler-with-cpp -trigraphs $(ASFLAGS) -c $< -o $@

# deps
-include $(REAL_OBJS:.o=.d)
