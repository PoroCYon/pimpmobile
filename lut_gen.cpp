#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <math.h>
#include <typeinfo>

#include "src/config.h" // get the current config
#include "src/math.h"   // get the current config

/*
this is the lut-generator for pimpmobile.
the delta-luts are dependant on the sample-rate, and must be re-generated whenever the sample-rate-config has changed.
*/

const unsigned char clz_lut[256] =
{
	0x8, 0x7, 0x6, 0x6, 0x5, 0x5, 0x5, 0x5, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
};

unsigned short linear_freq_lut[12 * 64];
unsigned short amiga_freq_lut[(AMIGA_FREQ_TABLE_SIZE / 2) + 1];

float get_normal_noise()
{
	float r = 0.0;
	for (unsigned j = 0; j < 12; ++j)
	{
		r += rand();
	}
	r /= RAND_MAX;
	r -= 6;
	return r;
}

template <typename T>
void print_lut(T *lut, size_t size)
{
	for (size_t i = 0; i < size; ++i)
	{
		printf("%d, ", lut[i]);
	}
}

#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
#define PRINT_LUT(x) print_lut(x, ARRAY_SIZE(x))

int main(int argc, char *argv[])
{
/*
	for (unsigned i = 32; i < 255; ++i)
	{
		printf("%f\n", (18157 * 5) / float(i * 2));
	}
*/

	// generate a lut for linear frequencies
	for (unsigned i = 0; i < 12 * 64; ++i)
	{
		linear_freq_lut[i] = unsigned(float(pow(2.0, i / 768.0) * 8363.0 / (1 << 8)) * float(1 << 9) + 0.5);
	}
	// dump it
	printf("u16 linear_freq_lut[%d] = {\n", ARRAY_SIZE(linear_freq_lut));
	PRINT_LUT(linear_freq_lut);
	printf("};\n\n");

	// generate a lut for amiga frequencies
	for (unsigned i = 0; i < (AMIGA_FREQ_TABLE_SIZE / 2) + 1; ++i)
	{
		unsigned p = i + (AMIGA_FREQ_TABLE_SIZE / 2);
		amiga_freq_lut[i] = (unsigned short)(((8363 * 1712) / float((p * 32768) / AMIGA_FREQ_TABLE_SIZE)) * (1 << 6) + 0.5);
	}
	// dump it
	printf("u16 amiga_freq_lut[%d] = {\n", ARRAY_SIZE(amiga_freq_lut));
	PRINT_LUT(amiga_freq_lut);
	printf("};\n\n");

#if 0
	for (unsigned period = 1; period < 32767; period += 17)
	{
		float frequency1 = (8363 * 1712) / float(period);
		float delta1 = frequency1 / SAMPLERATE;
		delta1 = unsigned(delta1 * (1 << 12) + 0.5) * (1.0 / (1 << 12));
		
		float delta2 = get_amiga_delta(period) * (1.0 / (1 << 12));
		
//		printf("%f %f\n", delta1, delta2);
		printf("%f %f, %f\n", delta1, delta2, fabs(delta1 - delta2) / delta1);
	}
#endif

#if 0 // testcode for linear frequency-lut
	for (unsigned i = 0; i < 12 * 14; ++i)
	{
//		Period = 10*12*16*4 - Note*16*4 - FineTune/2;
//		Frequency = 8363*2^((6*12*16*4 - Period) / (12*16*4));
		
		for (int finetune = -64; finetune < 64; finetune += 16)
		{
			int period = (10 * 12 * 16 * 4) - i * (16 * 4) - finetune / 2;
			
			float frequency1 = 8363 * pow(2.0, float(6 * 12 * 16 * 4 - period) / (12 * 16 * 4));
			float delta1 = frequency1 / SAMPLERATE;
			delta1 = unsigned(delta1 * (1 << 12) + 0.5) * (1.0 / (1 << 12));
			
			float delta2 = get_linear_delta(period) * (1.0 / (1 << 12));
			
			printf("%f ", (delta1 - delta2) / delta1);
//			printf("%f\n", delta1);
		}
		printf("\n");
	}
#endif

#if 0
	for (unsigned i = 0; i < 304; ++i)
	{
		float r;
		
		do {
			r = get_normal_noise() * (2.0 / 3) * (1 << 6);
		}
		while (r > 127 || r < -128);
		
		printf("%i, ", int(r));
	}
#endif
}
